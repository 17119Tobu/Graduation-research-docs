import matplotlib.pyplot as plt
import networkx as nx
import random
import numpy as np

class CNN:
    def __init__(self, node_num, u, seed = 0):
        self.graph = nx.Graph()
        self.node_num = node_num
        self.u = u
        random.seed(seed)
        self.make_cnn()
        
    def make_cnn(self):
        self.graph.add_node(0)
        while len(list(self.graph.nodes)) < self.node_num:
            if random.random() < 1 - self.u:
                new_node = len(list(self.graph.nodes))
                self.graph.add_node(new_node)
                node_list = list(self.graph.nodes)
                node_list.remove(new_node)
                selected_node = random.choice(node_list)
                neighbor_nodes = self.get_neighbors(selected_node)
                for nn in neighbor_nodes:
                    self.graph.add_edge(nn, new_node, attribute="potential")
                self.graph.add_edge(selected_node, new_node, attribute="real")
            else:
                potential_edge_list = self.get_attribute_edgelist("potential")
                if len(potential_edge_list) > 0:
                    node_a, node_b = random.choice(potential_edge_list)
                    self.graph.edges[node_a, node_b]["attribute"] = "real"
                    

    def get_attribute_edgelist(self, attr):

        edge_dict = nx.get_edge_attributes(self.graph, "attribute")
        attr_edgelist = []
        for edge, attribute in edge_dict.items():
            if attribute == attr:
                attr_edgelist.append(edge)
        return attr_edgelist
                
    def get_neighbors(self, node):
  
        edgelist = self.get_attribute_edgelist("real")
        nodelist = []
        for node_a, node_b in edgelist:
            if node_a == node:
                nodelist.append(node_b)
            elif node_b == node:
                nodelist.append(node_a)
        return nodelist
    
    def plot_graph(self):
        k = [i for i,x in enumerate(nx.degree_histogram(self.graph)) if x != 0]
        degree_dist = [i/self.node_num for i in nx.degree_histogram(self.graph) if i != 0]
        print(k)
        print(degree_dist)
        plt.xlabel('degree k')
        plt.ylabel('P(k)')
        plt.xscale('log')
        plt.yscale('log')
        plt.ylim(0.0001,1)
        plt.scatter(k, degree_dist)
        
        print('平均次数')
        print(sum(d for n, d in self.graph.degree()) / self.graph.number_of_nodes())
        print('次数相関係数')
        print(nx.degree_assortativity_coefficient(self.graph))
        print('クラスタリング係数')
        print(nx.average_clustering(self.graph))
        print('最短経路長')
        print(nx.average_shortest_path_length(self.graph))
        
cnn = CNN(node_num=15000, u=0.3)
cnn.make_cnn()
cnn.plot_graph()
